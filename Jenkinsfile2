pipeline {
    environment {
        mydockerhub = "charanavvari/demoone"
        dockerCredentialID = 'dockerhub_jenkins_creds_id'
        dockerImage = ''
    }
    agent { label 'server2' } 
    //agent any
    stages {
        stage('checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build maven app1') {
            steps {
                sh "mvn package -B test"
                sh "ls -l target"
            }
        }
           stage('Building docker image1') { 
            steps { 
                script { 
                    dockerImage = docker.build mydockerhub
                }
            } 
        }
	  stage('Deploy docker image1') { 
            steps { 
                script { 
                    docker.withRegistry( '', dockerCredentialID ) { 
                        dockerImage.push() 
                    }
                } 
            }
        }
        stage('Build maven app2') {
            steps {
	    	//do some modification to src code here
		sh '''sed -i 's/Hello World!!/Hello World!! from Server2/1' src/main/java/com/infotech/app/SpringBootLoggerApplication.java'''
                sh "mvn package -B test"
                sh "ls -l target"
            }
        }
           stage('Building docker image2') { 
            steps { 
                script { 
                    dockerImage = docker.build "charanavvari/demotwo"
                }
            } 
        }
           stage('Run docker image') { 
            steps { 
                script { 
         
	 	   dockerImage.inside('--entrypoint='){
			sh "ls -l"

		    }
		    

                }
            } 
        }
	/*
           stage('Load balancing Two apps') { 
            steps { 
                script { 
                    sh "docker-compose up -d"
		    sh "sleep 30"
		    sh 'curl -f http://localhost:9000/'
		    sh 'curl -f http://localhost:5002/'
                }
            } 
        }
	 */
        stage('Deploy docker image2') { 
            steps { 
                script { 
                    docker.withRegistry( '', dockerCredentialID ) { 
                        dockerImage.push() 
                    }
                } 
            }
        }
	
    }
}
